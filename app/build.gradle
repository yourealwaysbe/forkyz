apply plugin: 'com.android.application'

repositories {
    maven { url "https://jitpack.io" }
    google()
}

android {
    Properties props = new Properties()

    def propsPath = System.getProperty("user.home") + "/androidkeyinfo.properties"

    if (new File(propsPath).exists())
        props.load(new FileInputStream(propsPath))

    compileSdkVersion 30
    buildToolsVersion "30.0.0"

    lintOptions {
        abortOnError false
    }

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 30
        testInstrumentationRunner "android.test.InstrumentationTestRunner"
        multiDexEnabled true
    }

    compileOptions.with {
        coreLibraryDesugaringEnabled true
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    signingConfigs {
        if (file(System.getProperty("user.home") + "/androidkeystore").exists()) {
            debugSigned {
                storeFile file(System.getProperty("user.home") + "/androidkeystore")
                storePassword props.getProperty("storePassword")
                keyAlias "key_alias"
                keyPassword props.getProperty("keyPassword")
            }
        }
        release {
            storeFile file(System.getProperty("user.home") + "/androidkeystore")
            storePassword props.getProperty("storePassword")
            keyAlias "key_alias"
            keyPassword props.getProperty("keyPassword")
        }
    }

    buildTypes {
        debug {
        }
        if (file(System.getProperty("user.home") + "/androidkeystore").exists()) {
            debugSigned {
                signingConfig signingConfigs.debugSigned
            }
        }
        if (file(System.getProperty("user.home") + "/androidkeystore").exists()) {
            release {
                signingConfig signingConfigs.release
                minifyEnabled true
                proguardFile file('src/main/assemble/proguard-android.txt')
            }
        }
    }

    tasks.withType(JavaCompile) {
        configure(options) {
            options.compilerArgs << '-Xlint:deprecation' << '-Xlint:unchecked'
        }
    }
}

dependencies {
    androidTestImplementation 'com.jayway.android.robotium:robotium-solo:4.3.1'
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:1.0.9'
    implementation 'androidx.activity:activity:1.2.0'
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.0-beta5'
    implementation 'androidx.fragment:fragment:1.3.0'
    implementation 'androidx.preference:preference:1.1.0'
    implementation 'androidx.recyclerview:recyclerview:1.0.0'
    implementation 'androidx.viewpager2:viewpager2:1.0.0'
    implementation 'androidx.webkit:webkit:1.3.0-alpha02'
    implementation 'com.github.franmontiel:PersistentCookieJar:v1.0.1'
    implementation 'com.google.android.material:material:1.1.0-beta01'
    implementation 'com.nineoldandroids:library:2.4.0'
    implementation 'com.squareup.okhttp3:okhttp:3.2.0'
    implementation 'org.jsoup:jsoup:1.13.1'
    implementation project(":puzlib")
}

task prepareChrome {
    doLast {
        def slurp = new XmlSlurper().parse(file("src/main/AndroidManifest.xml"))
        def versionCode = slurp.'@android:versionCode'.text()
        def versionName = slurp.'@android:versionName'.text()
        copy {
            from("src/main/chrome") {
                include "**/*.json"
                include "**/*.html"
                filter {
                    it.replaceAll('@@versionCode@@', versionCode)
                            .replaceAll('@@versionName@@', versionName)
                }
            }
            into "build/chrome"
        }
        copy {
            from("src/main/chrome") {
                exclude "**/*.json"
                exclude "**/*.html"
            }
            into "build/chrome"
        }
    }
}

task assembleChrome {
    doLast {
        copy {
            from "build/outputs/apk/app-release.apk"
            into "build/chrome/vendor/chromium/crx"
        }
    }
}
tasks.assembleChrome.dependsOn "prepareChrome"
tasks.assembleChrome.dependsOn "assembleRelease"

task packageChrome(type: Zip) {
    from "build/chrome"
    archiveFileName = "forkyz-chrome.zip"
}
tasks.packageChrome.dependsOn assembleChrome

tasks.build.dependsOn packageChrome
